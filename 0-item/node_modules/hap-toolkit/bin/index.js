#!/usr/bin/env node
/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

const program = require('commander')
const chalk = require('chalk')
const { colorconsole } = require('../lib/common/utils')

program
  .version(require('../package').version, '-v, --version')
  .usage('<command> [options]')

program
  .command('init <app-name>')
  .description('create a new project.')
  .action(name => {
    const generate = require('../lib/commands/init')
    generate(name)
  })

program
  .command('build')
  .description('build the project')
  .option('--disable-source-map', 'disable source map')
  .option('--optimize-desc-meta', 'optimize desc meta')
  .option('--optimize-css-attr', 'optimize css attr')
  .option('--optimize-template-attr', 'optimize template attr')
  .option('--optimize-style-page-level', 'optimize style in page')
  .option('--optimize-style-app-level', 'optimize style in app ')
  .action(options => {
    const compile = require('../lib/commands/compile')
    compile('native', 'dev', false, options)
  })

program
  .command('debug', { noHelp: true })
  .description('debug the project')
  .action(() => {
    const launchServer = require('../lib/server')
    launchServer({
      modules: ['debugger'],
      port: 8081
    })
  })

program
  .command('server')
  .description('open server for project')
  .option('--port <port>', 'specified port', 8000)
  .option('--watch', 'recompile project while file changes')
  .option('--clear-records', 'clear device records')
  .option('--disable-adb', 'disable adb debug')
  .option('--chrome-path <chrome-path>', 'support for a user specified chrome path')
  .action(options => {
    const launchServer = require('../lib/server')
    const compile = require('../lib/commands/compile')
    const { port, watch, clearRecords, chromePath, disableAdb } = options
    launchServer({ port, watch, clearRecords, chromePath, 'disableADB': disableAdb })
    if (options.watch) {
      compile('native', 'dev', true)
    }
  })

program
  .command('watch')
  .description('recompile project while file changes')
  .action(() => {
    const compile = require('../lib/commands/compile')
    compile('native', 'dev', true)
  })

program
  .command('release')
  .description('release the project')
  .option('--debug', 'use debug sign')
  .option('--stats', 'analyse time and size of webpack output files')
  .option('--optimize-desc-meta', 'optimize desc meta')
  .option('--optimize-css-attr', 'optimize css attr')
  .option('--optimize-template-attr', 'optimize template attr')
  .option('--optimize-style-page-level', 'optimize style in page')
  .option('--optimize-style-app-level', 'optimize style in app ')
  .action(options => {
    const compile = require('../lib/commands/compile')
    compile('native', 'prod', false, options)
  })

program
  .command('postinstall', { 'noHelp': true })
  .description('Transpiling async/await for nodejs<7.6.x, deprecated.')
  .action(() => {
    colorconsole.warn('Deprecated command!')
  })

// TODO
// Since we properly have all dependencies included,
// and if we make {babel, eslint}-configuration built-in,
// we won't need this `update` command anymore.
program
  .command('update')
  .description('update tools for project')
  .option('--force', 'force update tools for project')
  .action(options => {
    const update = require('../lib/commands/update')
    colorconsole.warn('hap-toolkit>=0.1.0 不再需要运行此命令\n')
    update(options.force)
  })

program.on('--help', () => {
  console.log()
  console.log(`  Run ${chalk.cyan(`hap <command> --help`)} for detailed usage of given command.`)
  console.log()
})

// 更改 NodeJS 10.1.0 上的 "fs.promise is Experiment" 日志输出位置
require('fs-extra')
setTimeout(() => {
  program.parse(process.argv)

  if (!process.argv.slice(2).length) {
    program.outputHelp()
  }
}, 0)

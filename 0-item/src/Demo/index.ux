<template>
    <div class="doc-page">
        <div class="content">
            <canvas class="new-canvas" id="new-canvas"></canvas>
        </div>
    </div>
</template>

<style>
    .content {
        flex-direction: column;
        align-items: center;
        width: 100%;
    }
    
    .new-canvas {
        height: 580px;
        width: 480px;
    }
    
    body {
        margin: 0px;
        padding: 0px;
        text-align: center;
    }
    
    canvas {
        outline: 0;
        border: 1px solid #000;
        margin-left: auto;
        margin-right: auto;
    }
</style>

<script>
    export default {
        private: {
            drawComplete: false
        },
        onInit() {
            this.$page.setTitleBar({
                text: 'canvas简单绘制'
            })
        },
        onShow() {
            if (!this.drawComplete) {
                this.drawCanvas()
            }
        },
        drawCanvas() {
            var points = 55
            var height = 110;
            var state = 100;
            var gLoop = 70
            const canvas = this.$element('new-canvas') //获取 canvas 组件
            const ctx = canvas.getContext('2d') //获取 canvas 绘图上下文

            //绘制一个矩形
            ctx.fillStyle = 'rgb(200,0,0)'
            ctx.fillRect(20, 20, 200, 200)

            //绘制另一个矩形
            ctx.fillStyle = 'rgba(0, 0, 200, 0.5)'
            ctx.fillRect(80, 80, 200, 200)

            this.drawComplete = true

            var clear = function() {
                ctx.fillStyle = '#d0e7f9';
                ctx.clearRect(0, 0, 330, 110);
                ctx.beginPath();
                ctx.rect(0, 0, 330, 110);
                ctx.closePath();
                ctx.fill();
            }

            var howManyCircles = 10,
                circles = [];

            for (var i = 0; i < howManyCircles; i++)
                circles.push([Math.random() * 330, Math.random() * 110, Math.random() * 100, Math.random() / 2]);

            var DrawCircles = function() {
                for (var i = 0; i < howManyCircles; i++) {
                    ctx.fillStyle = 'rgba(255, 255, 255, ' + circles[i][3] + ')';
                    ctx.beginPath();
                    ctx.arc(circles[i][0], circles[i][1], circles[i][2], 0, Math.PI * 2, true);
                    ctx.closePath();
                    ctx.fill();
                }
            };

            var MoveCircles = function(e) {
                for (var i = 0; i < howManyCircles; i++) {
                    if (circles[i][1] - circles[i][2] > 110) {
                        circles[i][0] = Math.random() * 330;
                        circles[i][2] = Math.random() * 100;
                        circles[i][1] = 0 - circles[i][2];
                        circles[i][3] = Math.random() / 2;
                    } else {
                        circles[i][1] += e;
                    }
                }
            };

            var player = new(function() {
                var that = this;
                that.image = new Image();

                that.image.src = "angel.png"
                that.width = 65;
                that.height = 95;
                that.frames = 1;
                that.actualFrame = 0;
                that.X = 0;
                that.Y = 0;

                that.isJumping = false;
                that.isFalling = false;
                that.jumpSpeed = 0;
                that.fallSpeed = 0;

                that.jump = function() {
                    if (!that.isJumping && !that.isFalling) {
                        that.fallSpeed = 0;
                        that.isJumping = true;
                        that.jumpSpeed = 17;
                    }
                }

                that.checkJump = function() {
                    //a lot of changes here

                    if (that.Y > 110 * 0.4) {
                        that.setPosition(that.X, that.Y - that.jumpSpeed);
                    } else {
                        if (that.jumpSpeed > 10)
                            points++;
                        // if player is in mid of the gamescreen
                        // dont move player up, move obstacles down instead
                        MoveCircles(that.jumpSpeed * 0.5);

                        platforms.forEach(function(platform, ind) {
                            platform.y += that.jumpSpeed;

                            if (platform.y > 110) {
                                var type = ~~(Math.random() * 5);
                                if (type == 0)
                                    type = 1;
                                else
                                    type = 0;

                                platforms[ind] = new Platform(Math.random() * (330 - platformWidth), platform.y - 110, type);
                            }
                        });
                    }


                    that.jumpSpeed--;
                    if (that.jumpSpeed == 0) {
                        that.isJumping = false;
                        that.isFalling = true;
                        that.fallSpeed = 1;
                    }

                }

                that.fallStop = function() {
                    that.isFalling = false;
                    that.fallSpeed = 0;
                    that.jump();
                }

                that.checkFall = function() {
                    if (that.Y < 110 - 114) {
                        that.setPosition(that.X, that.Y + that.fallSpeed);
                        that.fallSpeed++;
                    } else {
                        if (points == 0)
                            that.fallStop();
                        else
                            GameOver();
                    }
                }

                that.moveLeft = function() {
                    if (that.X > 0) {
                        that.setPosition(that.X - 5, that.Y);
                    }
                }

                that.moveRight = function() {
                    if (that.X + 330 < 334) {
                        that.setPosition(that.X + 5, that.Y);
                    }
                }


                that.setPosition = function(x, y) {
                    that.X = x;
                    that.Y = y;
                }

                that.interval = 0;
                that.draw = function() {
                    try {
                        ctx.drawImage(that.image, 0, 110 * that.actualFrame, 330, 110, that.X, that.Y, 330, 110);
                    } catch (e) {};

                    if (that.interval == 4) {
                        if (that.actualFrame == that.frames) {
                            that.actualFrame = 0;
                        } else {
                            that.actualFrame++;
                        }
                        that.interval = 0;
                    }
                    that.interval++;
                }
            })();


            player.setPosition(~~((330 - player.width) / 2), 110 - 114);
            player.jump();

            document.onmousemove = function(e) {
                if (player.X + c.offsetLeft > e.pageX) {
                    player.moveLeft();
                } else if (player.X + c.offsetLeft < e.pageX) {
                    player.moveRight();
                }

            }
            var nrOfPlatforms = 7,
                platforms = [],
                platformWidth = 70,
                platformHeight = 20;

            var Platform = function(x, y, type) {
                var that = this;

                that.firstColor = '#FF8C00';
                that.secondColor = '#EEEE00';
                that.onCollide = function() {
                    player.fallStop();
                };

                if (type === 1) {
                    that.firstColor = '#AADD00';
                    that.secondColor = '#698B22';
                    that.onCollide = function() {
                        player.fallStop();
                        player.jumpSpeed = 50;
                    };
                }



                that.x = ~~x;
                that.y = y;
                that.type = type;

                //NEW IN PART 5
                that.isMoving = ~~(Math.random() * 2);
                that.direction = ~~(Math.random() * 2) ? -1 : 1;

                that.draw = function() {
                    ctx.fillStyle = 'rgba(255, 255, 255, 1)';
                    var gradient = ctx.createRadialGradient(that.x + (platformWidth / 2), that.y + (platformHeight / 2), 5, that.x + (platformWidth / 2), that.y + (platformHeight / 2), 45);
                    gradient.addColorStop(0, that.firstColor);
                    gradient.addColorStop(1, that.secondColor);
                    ctx.fillStyle = gradient;
                    ctx.fillRect(that.x, that.y, platformWidth, platformHeight);
                };

                return that;
            };

            var generatePlatforms = function() {
                var position = 0,
                    type;
                for (var i = 0; i < nrOfPlatforms; i++) {
                    type = ~~(Math.random() * 5);
                    if (type == 0)
                        type = 1;
                    else
                        type = 0;
                    platforms[i] = new Platform(Math.random() * (330 - platformWidth), position, type);
                    if (position < 110 - platformHeight)
                        position += ~~(110 / nrOfPlatforms);
                }
            }();

            var checkCollision = function() {
                platforms.forEach(function(e, ind) {
                    if (
                        (player.isFalling) &&
                        (player.X < e.x + platformWidth) &&
                        (player.X + player.width > e.x) &&
                        (player.Y + 110 > e.y) &&
                        (player.Y + 110 < e.y + platformHeight)
                    ) {
                        e.onCollide();
                    }
                })
            }

            var GameLoop = function() {
                clear();
                //MoveCircles(5);
                DrawCircles();

                if (player.isJumping) player.checkJump();
                if (player.isFalling) player.checkFall();

                player.draw();

                platforms.forEach(function(platform, index) {
                    if (platform.isMoving) {
                        if (platform.x < 0) {
                            platform.direction = 1;
                        } else if (platform.x > 330 - platformWidth) {
                            platform.direction = -1;
                        }
                        platform.x += platform.direction * (index / 2) * ~~(points / 100);
                    }
                    platform.draw();
                });

                checkCollision();

                ctx.fillStyle = "Black";
                ctx.fillText("POINTS:" + points, 10, height - 10);

                if (state)
                    gLoop = setTimeout(GameLoop, 1000 / 50);
            }

            var GameOver = function() {
                state = false;
                clearTimeout(gLoop);
                setTimeout(function() {
                    clear();

                    ctx.fillStyle = "Black";
                    ctx.font = "10pt Arial";
                    ctx.fillText("GAME OVER", 330 / 2 - 60, 110 / 2 - 50);
                    ctx.fillText("YOUR RESULT:" + points, 330 / 2 - 60, 110 / 2 - 30);
                }, 100);

            };

            GameLoop();
        }
    }
</script>


<!-- <template>

  <div class="demo-page">
    <text class="title">欢迎打开{{title}}</text>

    <input class="btn" type="button" value="跳转到详情页" onclick="routeDetail" />
  </div>
</template>

<style>
    .demo-page {
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    
    .title {
        font-size: 40px;
        text-align: center;
    }
    
    .btn {
        width: 550px;
        height: 86px;
        margin-top: 75px;
        border-radius: 43px;
        background-color: #09ba07;
        font-size: 30px;
        color: #ffffff;
    }
</style>

<script>
    import router from '@system.router'

    export default {
        // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
        private: {
            title: '示例1页面'
        },
        routeDetail() {
            // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
            router.push({
                uri: '/DemoDetail'
            })
        }
    }
</script> -->ffff